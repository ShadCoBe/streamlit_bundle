import streamlit as st
import pandas as pd
from datetime import datetime

# --- CONFIGURATION G√âN√âRALE ---
st.set_page_config(page_title="Data Quality & BAM Dashboard", layout="wide")

# --- HEADER ---
col1, col2 = st.columns([1, 5])
with col1:
    st.image("C:\\Users\\bensa\\Desktop\\cacib.png", width=80)
with col2:
    st.title("Capital Markets - Data Quality & BAM Dashboard")
    st.caption("Suivi de la qualit√© des donn√©es et de l'activit√© op√©rationnelle en temps r√©el")

st.markdown("---")

# --- SIDEBAR ---
st.sidebar.header("Navigation")
page = st.sidebar.radio("Choisir une vue :",
                        ["Vue d'ensemble", "Qualit√© des donn√©es", "Activit√© & SLA", "Alertes", "√Ä propos"])

# --- METRICS MOCK DATA ---
dq_score = 92.5
late_trades = 5
failed_controls = 12
sla_breaches = 3
last_update = datetime.now().strftime("%d/%m/%Y %H:%M")

# --- PAGE : VUE D'ENSEMBLE ---
if page == "Vue d'ensemble":
    st.subheader("Vue d'ensemble des indicateurs cl√©s")
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("DQ Global Score", f"{dq_score} %", "+0.5%")
    col2.metric("Trades en retard", late_trades, "-2")
    col3.metric("Contr√¥les √©chou√©s", failed_controls, "+1")
    col4.metric("SLA Breach (24h)", sla_breaches)

    st.info(f"Derni√®re mise √† jour : {last_update}")
    st.markdown("### Commentaires cl√©s :")
    st.markdown("- La qualit√© des donn√©es reste stable mais quelques anomalies d√©tect√©es sur le booking TEAS.")
    st.markdown("- Les d√©lais de r√®glement sont ma√Ætris√©s, mais vigilance sur les paiements collateral.")

# --- PAGE : QUALIT√â DES DONN√âES ---
elif page == "Qualit√© des donn√©es":
    st.subheader("Analyse de la qualit√© des donn√©es")

    dq_df = pd.DataFrame({
        "Contr√¥le": ["Booking TEAS", "SSI Payment", "Reconciliation", "Trade Enrichment"],
        "Dimension DQ": ["Exactitude", "Conformit√©", "Compl√©tude", "Coh√©rence"],
        "Criticit√©": ["Haute", "Moyenne", "Haute", "Basse"],
        "√âchecs (7j)": [2, 1, 3, 0],
        "Taux de succ√®s": [98.5, 99.2, 96.7, 100.0]
    })

    st.markdown("### Synth√®se des contr√¥les")
    st.dataframe(dq_df, use_container_width=True)

    st.markdown("### D√©tails des anomalies et responsabilit√©s")
    anomalies_df = pd.DataFrame({
        "Contr√¥le": ["Booking TEAS", "Booking TEAS", "Reconciliation", "SSI Payment"],
        "Anomalie d√©tect√©e": [
            "Trade sans date de valeur",
            "Produit d√©riv√© sans taux associ√©",
            "√âcart de montant sur SWIFT MT54x",
            "Code BIC invalide"
        ],
        "Criticit√©": ["Haute", "Moyenne", "Haute", "Moyenne"],
        "Responsable": ["Pierre Martin", "Pierre Martin", "L√©a Dubois", "Sophie Laurent"],
        "Date d√©tection": ["14/06/2025", "15/06/2025", "15/06/2025", "13/06/2025"],
        "Statut": ["Ouvert", "En cours", "Ouvert", "Cl√¥tur√©"]
    })

    criticit√©_filter = st.selectbox("Filtrer par criticit√© :", options=["Tous", "Haute", "Moyenne", "Basse"])
    if criticit√©_filter != "Tous":
        anomalies_df = anomalies_df[anomalies_df["Criticit√©"] == criticit√©_filter]

    st.dataframe(anomalies_df, use_container_width=True)

# --- PAGE : ACTIVIT√â & SLA ---
elif page == "Activit√© & SLA":
    st.subheader("Business Activity Monitoring (BAM) & SLA")

    col1, col2 = st.columns(2)
    with col1:
        st.metric("Trades trait√©s aujourd'hui", "12 540", "‚è± +1.8%")
    with col2:
        st.metric("Paiements trait√©s", "3 180", "-0.4%")

    st.markdown("### Taux de respect des SLA (Rolling 7j)")
    sla_df = pd.DataFrame({
        "Flux": ["Settlement", "Confirmation", "Reconciliation", "Collateral"],
        "SLA Target": ["99%", "98%", "97%", "99%"],
        "SLA R√©el": ["98.8%", "96.5%", "96.2%", "99.5%"],
        "Alerte": ["üü°", "üî¥", "üî¥", "üü¢"]
    })
    st.dataframe(sla_df, use_container_width=True)

# --- PAGE : ALERTES ---
elif page == "Alertes":
    st.subheader("Alertes et anomalies actives")

    alerts = [
        {"date": "15/06/2025", "type": "Contr√¥le √©chou√©", "domaine": "Booking TEAS", "gravit√©": "Haute"},
        {"date": "15/06/2025", "type": "SLA non respect√©", "domaine": "Confirmation", "gravit√©": "Critique"},
        {"date": "14/06/2025", "type": "Trade en anomalie", "domaine": "Reconciliation", "gravit√©": "Moyenne"}
    ]
    alert_df = pd.DataFrame(alerts)
    st.table(alert_df)

# --- PAGE : √Ä PROPOS ---
elif page == "√Ä propos":
    st.subheader("√Ä propos de ce dashboard")
    st.markdown("""
    Cette application est con√ßue pour suivre en temps r√©el les indicateurs cl√©s de **qualit√© des donn√©es** et de **performance op√©rationnelle** dans le cadre des activit√©s de march√©s (Capital Markets Operations).

    Elle peut √™tre connect√©e √† des outils comme :
    - des r√©f√©rentiels (Markit, Swift, AGS‚Ä¶)
    - des moteurs de contr√¥les qualit√© (ex: Talend DQ, Informatica DQ‚Ä¶)
    - des syst√®mes Middle/Back Office (TEAS, PACO, Settlement...)

    **Contact :** data.governance@banqueexemple.com
    """)