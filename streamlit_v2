# LAUNCH_app.py — furtif : ouvre le navigateur puis se ferme
import os, sys, subprocess, socket, time, webbrowser

def here() -> str:
    return getattr(sys, "_MEIPASS", os.path.dirname(os.path.abspath(__file__)))

def resource_path(*parts: str) -> str:
    return os.path.join(here(), *parts)

def wait_for_port(host: str, port: int, timeout: float = 20.0) -> bool:
    deadline = time.time() + timeout
    while time.time() < deadline:
        try:
            with socket.create_connection((host, port), timeout=1.0):
                return True
        except OSError:
            time.sleep(0.2)
    return False

def open_url(url: str):
    try:
        if webbrowser.open_new(url):
            return
    except Exception:
        pass
    if os.name == "nt":
        try:
            os.startfile(url)  # type: ignore[attr-defined]
            return
        except Exception:
            pass
        try:
            subprocess.Popen(["cmd", "/c", "start", "", url], shell=True)
            return
        except Exception:
            pass

if __name__ == "__main__":
    base = here()
    os.chdir(base)

    app_path = resource_path("app.py")
    host, port = "localhost", 8502
    url = f"http://{host}:{port}"

    # Flags Streamlit (pas de watcher, plus rapide)
    flags = {
        "server.headless": "true",                   # on ouvre nous-mêmes le navigateur
        "server.address": host,
        "server.port": str(port),
        "browser.gatherUsageStats": "false",
        "server.runOnSave": "false",
        "server.fileWatcherType": "none",
        "server.enableCORS": "false",
        "server.enableXsrfProtection": "false",
    }

    env = os.environ.copy()
    env["PYTHONPATH"] = base
    env["STREAMLIT_LAUNCHED_FROM_EXE"] = "1"

    # Utiliser pythonw.exe si possible (Windows) pour éviter la console
    py_exec = sys.executable
    if os.name == "nt" and py_exec.lower().endswith("python.exe"):
        pyw = py_exec[:-10] + "pythonw.exe"
        if os.path.exists(pyw):
            py_exec = pyw

    cmd = [py_exec, "-m", "streamlit", "run", app_path] + [f"--{k}={v}" for k, v in flags.items()]

    # Démarre Streamlit en arrière-plan, sans bloquer et en silencieux
    kwargs = dict(cwd=base, env=env)
    if os.name == "nt":
        # Masquer la fenêtre du sous-processus
        si = subprocess.STARTUPINFO()
        si.dwFlags |= subprocess.STARTF_USESHOWWINDOW
        kwargs["startupinfo"] = si
        # Couper la sortie
        kwargs["stdout"] = subprocess.DEVNULL
        kwargs["stderr"] = subprocess.DEVNULL

    subprocess.Popen(cmd, **kwargs)

    # Attendre que le serveur démarre puis ouvrir le navigateur
    if wait_for_port(host, port, timeout=25):
        open_url(url)

    # Fermer immédiatement le launcher
    sys.exit(0)
