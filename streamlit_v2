import os, sys, logging 
from streamlit.web import bootstrap

def resource_path(rel):
    base = getattr(sys, "_MEIPASS", os.path.dirname(os.path.abspath(__file__)))
    return os.path.join(base, rel)

if __name__ == "__main__":
    # --- Logging dans le dossier de l'exe
    log_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "run.log")
    logging.basicConfig(filename=log_path, level=logging.DEBUG, format="%(asctime)s %(levelname)s %(message)s")
    print(f"[launcher] Log file: {log_path}")

    app_path = resource_path("app.py")
    print(f"[launcher] app_path = {app_path}  exists={os.path.exists(app_path)}")

    # Vérifier les ressources clés
    logo = resource_path("assets/cacib.PNG")
    db   = resource_path("data/backend_DQ.db")
    print(f"[launcher] logo exists={os.path.exists(logo)}   path={logo}")
    print(f"[launcher] db   exists={os.path.exists(db)}     path={db}")

    flag_options = {
        # ne pas ouvrir le navigateur automatiquement
        "browser.gatherUsageStats": False,
        "server.headless": True,
        "server.address": "127.0.0.1",
        "server.port": 8502,  # change de 8501 -> 8502 pour éviter un conflit
        # éviter les relances et watchers dans le répertoire _MEIPASS
        "server.runOnSave": False,
        "server.fileWatcherType": "none",
        # (optionnel selon ton environnement)
        "server.enableCORS": False,
        "server.enableXsrfProtection": False,
    }

    try:
        bootstrap.run(app_path, "", [], flag_options)
    except Exception as e:
        import traceback
        msg = traceback.format_exc()
        print("[launcher] FATAL:", msg)
        logging.exception("launcher failed")
        # laisse la console ouverte pour lire l’erreur
        input("Press Enter to close...")
