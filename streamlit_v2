# LAUNCH_app.py — safe-lean
import os, sys, logging
from streamlit.web import bootstrap

def resource_path(rel: str) -> str:
    base = getattr(sys, "_MEIPASS", os.path.dirname(os.path.abspath(__file__)))
    return os.path.join(base, rel)

if __name__ == "__main__":
    base = getattr(sys, "_MEIPASS", os.path.dirname(os.path.abspath(__file__)))
    os.chdir(base)

    # Logging léger
    logging.basicConfig(
        filename=os.path.join(base, "run.log"),
        level=logging.INFO,
        format="%(asctime)s %(levelname)s %(message)s",
    )
    log = logging.getLogger("launcher")

    app_path = resource_path("app.py")
    if not os.path.exists(app_path):
        log.error("app.py introuvable: %s", app_path)
        raise SystemExit(1)

    # (facultatif) vérifs rapides d’assets critiques
    for rel in ("assets/cacib.PNG", "data/backend_DQ.db"):
        p = resource_path(rel)
        if not os.path.exists(p):
            log.warning("Ressource manquante: %s", p)

    flag_options = {
        "server.headless": True,
        "server.address": "127.0.0.1",
        "server.port": 8502,
        "browser.gatherUsageStats": False,
        "server.runOnSave": False,
        "server.fileWatcherType": "none",
        "server.enableCORS": False,
        "server.enableXsrfProtection": False,
    }

    try:
        log.info("Démarrage Streamlit: %s", app_path)
        bootstrap.run(app_path, "", [], flag_options)
    except Exception:
        log.exception("Echec lancement Streamlit")
        raise
